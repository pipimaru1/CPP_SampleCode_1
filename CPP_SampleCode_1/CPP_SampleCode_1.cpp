
//空のプロジェクト作成

// cpp_basics_sample.cpp
// C++の基本文法を学ぶためのサンプルコード（ポインタ除く）
#include <conio.h> //関数の定義が記述されている conioはCの標準ライブラリ
#include <iostream>
#include <string>
#include <vector>

// 関数の宣言
int add(int a, int b);
void printVector(const std::vector<int>& vec);

////////////////////////////////////////////////////
//エントリーポイント 
// main関数はC++のプログラムのエントリーポイント
// プログラムが実行されると、最初にこの関数が呼び出される
// main関数はint型を返す必要がある
// 戻り値は、プログラムの終了ステータスを示す
// 0は正常終了、0以外は異常終了を示すのが一般的
int main()

{
    /////////////////////////////////////////////////////////////////////////////////////////////
    // 1. 変数と基本型
	int a = 10;             // 整数型
	double b = 3.14;	    // 浮動小数点型   
	bool flag = true;       // 論理型
	char c = 'X';           // 文字型
	std::string message = "Hello, C++!"; // 文字列型 C++で追加された変数、正確にはクラスと呼ばれるもの

    std::cout << "a = " << a << std::endl;
    std::cout << "b = " << b << std::endl;
    std::cout << "flag = " << flag << std::endl;
    std::cout << "c = " << c << std::endl;
    std::cout << "message = " << message << std::endl;

	/////////////////////////////////////////////////////////////////////////////////////////////
	//1.1　整数型の最大値
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "サンプルコードを実行するためにキーを押してください。\n";
	_getch(); // ユーザーがキーを押すまで待機

	//intのプラスの最大値は32bit環境で2147483647。1を足すとどうなるかな?。ちなみに2147483647は 約21億4千万。
	int i_max = 2147483647;
	std::cout << "2147483647 + 1 = " << i_max + 1 << std::endl;
	//コンピューターの整数は最初のビットが符号ビットで、残りの31ビットが数値を表す。
	//符号ビットが1になると、負の数を表すことになる。
	//覚えておこう!!

	std::cout << "\n";
	_getch(); // ユーザーがキーを押すまで待機
	//負の数の無い整数型はunsigned int型と呼ばれる。
	//unsigned intで1を足すとどうなるかな?。
	unsigned int ui_max = 2147483647;
	std::cout << "2147483647 + 1 = " << ui_max + 1 << std::endl;
	//unsigned intは符号ビットが無いので、2147483647 + 1 = 2147483648になる。
	// unsigned intの別名でsize_t型というのがある。エイリアスという。
	// size_t型は、特に、ポインタのサイズや配列の位置やサイズを正確に表すのに使われる。

	std::cout << "\n";
	_getch(); // ユーザーがキーを押すまで待機
	//unsigned intの最大値で1を足すとどうなるかな?。
	ui_max = 4294967295;
	std::cout << "4294967295 + 1 = " << ui_max + 1 << std::endl;

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 2. if 文と条件分岐
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
    std::cout << "if文のサンプルコードを実行するためにキーを押してください。\n";
    _getch(); // ユーザーがキーを押すまで待機

	if (a > 5) // 5より大きい場合 >は演算子で、右辺が左辺より大きい場合にtrueを返す
	{ 
        // {}はブロックを示す 
        // pythpnのようにインデントは必要ない
        std::cout << "a is greater than 5" << std::endl;
    }
    else //否の場合
    {
        std::cout << "a is 5 or less" << std::endl;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 3. for ループ {}ブロックを繰り返し実行する
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "for文のサンプルコードを実行するためにキーを押してください。\n";
    _getch(); // ユーザーがキーを押すまで待機

	for (int i = 0; i < 5; ++i) 
    {
        // int iで整数iを確保。(定義と言う)
		// i=0で初期化　 
		// i < 5は条件式で、iが5より小さい場合にtrueを返す
        // ++iはiを1増やす演算子
		// for文は真ん中の部分がtrueの間、{}ブロックを繰り返し実行する
        std::cout << "i = " << i << std::endl;
    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 4. while ループ
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "while文のサンプルコードを実行するためにキーを押してください。\n";
    _getch(); // ユーザーがキーを押すまで待機

    int count = 0;
	while (count < 3) // countが3より小さい間
	{
		// while文は条件式がtrueの間、{}ブロックを繰り返し実行する
		std::cout << "count = " << count << std::endl;
		++count; // countを1増やす
	}

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 5. while ループ 
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "初期値を変えたwhile文のサンプルコードを実行するためにキーを押してください。\n";
    _getch(); // ユーザーがキーを押すまで待機

    count = 3; // countを3からスタート
    while (count < 3) // countが3より小さい間
    {
        // while文は条件式がtrueの間、{}ブロックを繰り返し実行する
        std::cout << "count = " << count << std::endl;
        ++count; // countを1増やす
    }
    std::cout << "while文では、条件が最初にfalseだったため、1回も実行されませんでした。\n\n";

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 6. do while ループ
    std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "do while文のサンプルコードを実行するためにキーを押してください。\n";
	_getch(); // ユーザーがキーを押すまで待機
    
	// do while文は{}ブロックを1回実行した後、条件式がtrueの間、{}ブロックを繰り返し実行する
	count = 3;
	do
	{
		std::cout << "count = " << count << std::endl;
		++count; // countを1増やす
	} while (count < 3); // countが3より小さい間
    std::cout << "do while文では、条件がfalseでも最初の1回は実行されました。\n\n";

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 7. switch 文
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "switch文のサンプルコードを実行するためにキーを押してください。\n";
    _getch(); // ユーザーがキーを押すまで待機
	int day = 3; // 1:月, 2:火, 3:水, 4:木, 5:金, 6:土, 7:日
	// switch文は、変数の値によって処理を分岐する
	switch (day)
	{
	case 1:
		std::cout << "月曜日" << std::endl;
		break; // break文でswitch文を抜ける
	case 2:
		std::cout << "火曜日" << std::endl;
		break;
	case 3:
		std::cout << "水曜日" << std::endl;
		break;
	case 4:
		std::cout << "木曜日" << std::endl;
		break;
	case 5:
		std::cout << "金曜日" << std::endl;
		break;
	case 6:
		std::cout << "土曜日" << std::endl;
		break;
	case 7:
		std::cout << "日曜日" << std::endl;
		break;
	default:
		std::cout << "無効な日付" << std::endl;
		break;
	}
	_getch(); // ユーザーがキーを押すまで待機

	/////////////////////////////////////////////////////////////////////////////////////////////
	// 7.1. switch 文
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "短縮switch文のサンプルコードを実行するためにキーを押してください。\n";
	_getch(); // ユーザーがキーを押すまで待機
	day = 5; 
	// 下記のように短く書くこともできる。デバッグはしにくくなるので注意。
	// ";" は文の区切りなので、下記のように複数の文を１行で書くこともできる。
	// pythonは改行が文の区切りになるので、pythonではできない書き方。
	switch (day)
	{
		case 1:std::cout << "月曜日" << std::endl;break; 
		case 2:std::cout << "火曜日" << std::endl;break;
		case 3:std::cout << "水曜日" << std::endl;break;
		case 4:std::cout << "木曜日" << std::endl;break;
		case 5:std::cout << "金曜日" << std::endl;break;
		case 6:std::cout << "土曜日" << std::endl;break;
		case 7:std::cout << "日曜日" << std::endl;break;
		default:std::cout << "無効な日付" << std::endl;break;
	}
	_getch(); // ユーザーがキーを押すまで待機

    ////////////////////////////////////////////////////////////////////////////////////////////
    // 8. 関数の利用
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "関数のサンプルコードを実行するためにキーを押してください。\n";
    _getch(); // ユーザーがキーを押すまで待機

    int sum = add(7, 8);
    std::cout << "7 + 8 = " << sum << std::endl;

	sum = add(345, 9097);
	std::cout << "345 + 9097 = " << sum << std::endl;

    /////////////////////////////////////////////////////////////////////////////////////////////
    // 9. 配列とベクター
	std::cout << "\n/////////////////////////////////////////////////////////////////////\n";
	std::cout << "配列とベクターのサンプルコードを実行するためにキーを押してください。\n";
	_getch(); // ユーザーがキーを押すまで待機

    int arr[3] = { 1, 2, 3 };
    std::vector<int> vec = { 4, 5, 6 };

    std::cout << "arr[1] = " << arr[1] << std::endl;
    printVector(vec);

    _getch(); // ユーザーがキーを押すまで待機
    // ベクターの要素を追加
	vec.push_back(7);
	vec.push_back(8);
    vec.push_back(9);
    std::cout << "ベクターに要素を追加した後の内容:\n";
	printVector(vec);

    // for文でベクターの要素を追加 
	for (int i = 10; i < 30; ++i)
	{
		vec.push_back(i);
	}
	std::cout << "for文でベクターに要素を追加した後の内容:\n";
	printVector(vec);
    _getch(); // ユーザーがキーを押すまで待機

    // ベクターの要素を削除
	vec.pop_back(); // 最後の要素を削除
	std::cout << "ベクターの最後の要素を削除した後の内容:\n";
	printVector(vec);
    _getch(); // ユーザーがキーを押すまで待機
    
    // ベクターの要素を削除
	vec.erase(vec.begin() + 1); // 2番目の要素を削除
	std::cout << "ベクターの2番目の要素を削除した後の内容:\n";
	printVector(vec);
    _getch(); // ユーザーがキーを押すまで待機
    
    // ベクターの要素を全て削除
	vec.clear(); // 全ての要素を削除
	std::cout << "ベクターの全ての要素を削除した後の内容(何も出ないはず):\n";
	printVector(vec);
    _getch(); // ユーザーがキーを押すまで待機


    return 0;
}

// 関数の定義
int add(int a, int b)
{
    return a + b;
}

// 引数にconst std::vector<int>&を指定することで、ベクターの参照を渡すことができる
// &は参照を示す ポインタと参照の回で詳しく説明する
void printVector(const std::vector<int>& vec)
{
    std::cout << "Vector contents: ";
	// このfor分は範囲for文と言う
	// これはC++11以降の機能で、C++の標準ライブラリに追加されたもの
	// vecの要素を1つずつ取り出してvに代入する
	// 取り出した要素はconst int&で参照渡しされる 値渡しも可能 
    for (const int& v : vec)
    {
		// 参照渡しされた要素を出力する 
        std::cout << v << " ";
    }

	std::cout << std::endl; //std::endlは改行を出力する。処理系に左右されない。"\n"はwindows系の改行
}
